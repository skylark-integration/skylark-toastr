{"version":3,"sources":["toastr.js"],"names":["define","skylark","langx","$","$container","listener","previousToast","toastId","toastType","error","info","success","warning","toastr","clear","$toastElement","clearOptions","options","getOptions","getContainer","clearToast","toastsToClear","children","i","length","clearContainer","remove","removeToast","message","title","optionsOverride","notify","type","iconClass","iconClasses","subscribe","callback","version","create","containerId","attr","addClass","positionClass","appendTo","target","createContainer","force","hideMethod","duration","hideDuration","easing","hideEasing","complete","publish","args","map","extend","preventDuplicates","shouldExit","intervalId","$titleElement","$messageElement","$progressElement","$closeElement","closeHtml","progressBar","hideEta","maxHideTime","response","state","startTime","Date","toastClass","suffix","escapeHtml","append","titleClass","setTitle","messageClass","setMessage","closeButton","closeClass","prepend","progressClass","rtl","newestOnTop","ariaValue","setAria","hide","showMethod","showDuration","showEasing","onShown","timeOut","setTimeout","hideToast","parseFloat","getTime","setInterval","updateProgress","closeOnHover","hover","stickAround","delayedHideToast","onclick","tapToDismiss","click","event","stopPropagation","undefined","cancelBubble","onCloseClick","handleEvents","debug","console","log","source","replace","override","method","closeMethod","closeDuration","closeEasing","clearTimeout","onHidden","endTime","extendedTimeOut","stop","percentage","width","is","attach"],"mappings":"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","file":"../toastr.js","sourcesContent":["define([\n    \"skylark-langx/skylark\",\n    \"skylark-langx/langx\",\n    \"skylark-utils-dom/query\"\n], function (skylark,langx,$) {\n    var $container;\n    var listener;\n    var toastId = 0;\n    var toastType = {\n        error: 'error',\n        info: 'info',\n        success: 'success',\n        warning: 'warning'\n    };\n\n    var toastr = {\n        clear: clear,\n        remove: remove,\n        error: error,\n        getContainer: getContainer,\n        info: info,\n        options: {},\n        subscribe: subscribe,\n        success: success,\n        version: '2.1.4',\n        warning: warning\n    };\n\n    var previousToast;\n\n\n    ////////////////\n\n    function error(message, title, optionsOverride) {\n        return notify({\n            type: toastType.error,\n            iconClass: getOptions().iconClasses.error,\n            message: message,\n            optionsOverride: optionsOverride,\n            title: title\n        });\n    }\n\n    function getContainer(options, create) {\n        if (!options) { options = getOptions(); }\n        $container = $('#' + options.containerId);\n        if ($container.length) {\n            return $container;\n        }\n        if (create) {\n            $container = createContainer(options);\n        }\n        return $container;\n    }\n\n    function info(message, title, optionsOverride) {\n        return notify({\n            type: toastType.info,\n            iconClass: getOptions().iconClasses.info,\n            message: message,\n            optionsOverride: optionsOverride,\n            title: title\n        });\n    }\n\n    function subscribe(callback) {\n        listener = callback;\n    }\n\n    function success(message, title, optionsOverride) {\n        return notify({\n            type: toastType.success,\n            iconClass: getOptions().iconClasses.success,\n            message: message,\n            optionsOverride: optionsOverride,\n            title: title\n        });\n    }\n\n    function warning(message, title, optionsOverride) {\n        return notify({\n            type: toastType.warning,\n            iconClass: getOptions().iconClasses.warning,\n            message: message,\n            optionsOverride: optionsOverride,\n            title: title\n        });\n    }\n\n    function clear($toastElement, clearOptions) {\n        var options = getOptions();\n        if (!$container) { getContainer(options); }\n        if (!clearToast($toastElement, options, clearOptions)) {\n            clearContainer(options);\n        }\n    }\n\n    function remove($toastElement) {\n        var options = getOptions();\n        if (!$container) { getContainer(options); }\n        if ($toastElement && $(':focus', $toastElement).length === 0) {\n            removeToast($toastElement);\n            return;\n        }\n        if ($container.children().length) {\n            $container.remove();\n        }\n    }\n\n    // internal functions\n\n    function clearContainer (options) {\n        var toastsToClear = $container.children();\n        for (var i = toastsToClear.length - 1; i >= 0; i--) {\n            clearToast($(toastsToClear[i]), options);\n        }\n    }\n\n    function clearToast ($toastElement, options, clearOptions) {\n        var force = clearOptions && clearOptions.force ? clearOptions.force : false;\n        if ($toastElement && (force || $(':focus', $toastElement).length === 0)) {\n            $toastElement[options.hideMethod]({\n                duration: options.hideDuration,\n                easing: options.hideEasing,\n                complete: function () { removeToast($toastElement); }\n            });\n            return true;\n        }\n        return false;\n    }\n\n    function createContainer(options) {\n        $container = $('<div/>')\n            .attr('id', options.containerId)\n            .addClass(options.positionClass);\n\n        $container.appendTo($(options.target));\n        return $container;\n    }\n\n    function getDefaults() {\n        return {\n            tapToDismiss: true,\n            toastClass: 'toast',\n            containerId: 'toast-container',\n            debug: false,\n\n            showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery\n            showDuration: 300,\n            showEasing: 'swing', //swing and linear are built into jQuery\n            onShown: undefined,\n            hideMethod: 'fadeOut',\n            hideDuration: 1000,\n            hideEasing: 'swing',\n            onHidden: undefined,\n            closeMethod: false,\n            closeDuration: false,\n            closeEasing: false,\n            closeOnHover: true,\n\n            extendedTimeOut: 1000,\n            iconClasses: {\n                error: 'toast-error',\n                info: 'toast-info',\n                success: 'toast-success',\n                warning: 'toast-warning'\n            },\n            iconClass: 'toast-info',\n            positionClass: 'toast-top-right',\n            timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky\n            titleClass: 'toast-title',\n            messageClass: 'toast-message',\n            escapeHtml: false,\n            target: 'body',\n            closeHtml: '<button type=\"button\">&times;</button>',\n            closeClass: 'toast-close-button',\n            newestOnTop: true,\n            preventDuplicates: false,\n            progressBar: false,\n            progressClass: 'toast-progress',\n            rtl: false\n        };\n    }\n\n    function publish(args) {\n        if (!listener) { return; }\n        listener(args);\n    }\n\n    function notify(map) {\n        var options = getOptions();\n        var iconClass = map.iconClass || options.iconClass;\n\n        if (typeof (map.optionsOverride) !== 'undefined') {\n            options = langx.extend(options, map.optionsOverride);\n            iconClass = map.optionsOverride.iconClass || iconClass;\n        }\n\n        if (shouldExit(options, map)) { return; }\n\n        toastId++;\n\n        $container = getContainer(options, true);\n\n        var intervalId = null;\n        var $toastElement = $('<div/>');\n        var $titleElement = $('<div/>');\n        var $messageElement = $('<div/>');\n        var $progressElement = $('<div/>');\n        var $closeElement = $(options.closeHtml);\n        var progressBar = {\n            intervalId: null,\n            hideEta: null,\n            maxHideTime: null\n        };\n        var response = {\n            toastId: toastId,\n            state: 'visible',\n            startTime: new Date(),\n            options: options,\n            map: map\n        };\n\n        personalizeToast();\n\n        displayToast();\n\n        handleEvents();\n\n        publish(response);\n\n        if (options.debug && console) {\n            console.log(response);\n        }\n\n        return $toastElement;\n\n        function escapeHtml(source) {\n            if (source == null) {\n                source = '';\n            }\n\n            return source\n                .replace(/&/g, '&amp;')\n                .replace(/\"/g, '&quot;')\n                .replace(/'/g, '&#39;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;');\n        }\n\n        function personalizeToast() {\n            setIcon();\n            setTitle();\n            setMessage();\n            setCloseButton();\n            setProgressBar();\n            setRTL();\n            setSequence();\n            setAria();\n        }\n\n        function setAria() {\n            var ariaValue = '';\n            switch (map.iconClass) {\n                case 'toast-success':\n                case 'toast-info':\n                    ariaValue =  'polite';\n                    break;\n                default:\n                    ariaValue = 'assertive';\n            }\n            $toastElement.attr('aria-live', ariaValue);\n        }\n\n        function handleEvents() {\n            if (options.closeOnHover) {\n                $toastElement.hover(stickAround, delayedHideToast);\n            }\n\n            if (!options.onclick && options.tapToDismiss) {\n                $toastElement.click(hideToast);\n            }\n\n            if (options.closeButton && $closeElement) {\n                $closeElement.click(function (event) {\n                    if (event.stopPropagation) {\n                        event.stopPropagation();\n                    } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {\n                        event.cancelBubble = true;\n                    }\n\n                    if (options.onCloseClick) {\n                        options.onCloseClick(event);\n                    }\n\n                    hideToast(true);\n                });\n            }\n\n            if (options.onclick) {\n                $toastElement.click(function (event) {\n                    options.onclick(event);\n                    hideToast();\n                });\n            }\n        }\n\n        function displayToast() {\n            $toastElement.hide();\n\n            $toastElement[options.showMethod](\n                {duration: options.showDuration, easing: options.showEasing, complete: options.onShown}\n            );\n\n            if (options.timeOut > 0) {\n                intervalId = setTimeout(hideToast, options.timeOut);\n                progressBar.maxHideTime = parseFloat(options.timeOut);\n                progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n                if (options.progressBar) {\n                    progressBar.intervalId = setInterval(updateProgress, 10);\n                }\n            }\n        }\n\n        function setIcon() {\n            if (map.iconClass) {\n                $toastElement.addClass(options.toastClass).addClass(iconClass);\n            }\n        }\n\n        function setSequence() {\n            if (options.newestOnTop) {\n                $container.prepend($toastElement);\n            } else {\n                $container.append($toastElement);\n            }\n        }\n\n        function setTitle() {\n            if (map.title) {\n                var suffix = map.title;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.title);\n                }\n                $titleElement.append(suffix).addClass(options.titleClass);\n                $toastElement.append($titleElement);\n            }\n        }\n\n        function setMessage() {\n            if (map.message) {\n                var suffix = map.message;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.message);\n                }\n                $messageElement.append(suffix).addClass(options.messageClass);\n                $toastElement.append($messageElement);\n            }\n        }\n\n        function setCloseButton() {\n            if (options.closeButton) {\n                $closeElement.addClass(options.closeClass).attr('role', 'button');\n                $toastElement.prepend($closeElement);\n            }\n        }\n\n        function setProgressBar() {\n            if (options.progressBar) {\n                $progressElement.addClass(options.progressClass);\n                $toastElement.prepend($progressElement);\n            }\n        }\n\n        function setRTL() {\n            if (options.rtl) {\n                $toastElement.addClass('rtl');\n            }\n        }\n\n        function shouldExit(options, map) {\n            if (options.preventDuplicates) {\n                if (map.message === previousToast) {\n                    return true;\n                } else {\n                    previousToast = map.message;\n                }\n            }\n            return false;\n        }\n\n        function hideToast(override) {\n            var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;\n            var duration = override && options.closeDuration !== false ?\n                options.closeDuration : options.hideDuration;\n            var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;\n            if ($(':focus', $toastElement).length && !override) {\n                return;\n            }\n            clearTimeout(progressBar.intervalId);\n            return $toastElement[method]({\n                duration: duration,\n                easing: easing,\n                complete: function () {\n                    removeToast($toastElement);\n                    clearTimeout(intervalId);\n                    if (options.onHidden && response.state !== 'hidden') {\n                        options.onHidden();\n                    }\n                    response.state = 'hidden';\n                    response.endTime = new Date();\n                    publish(response);\n                }\n            });\n        }\n\n        function delayedHideToast() {\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                intervalId = setTimeout(hideToast, options.extendedTimeOut);\n                progressBar.maxHideTime = parseFloat(options.extendedTimeOut);\n                progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n            }\n        }\n\n        function stickAround() {\n            clearTimeout(intervalId);\n            progressBar.hideEta = 0;\n            $toastElement.stop(true, true)[options.showMethod](\n                {duration: options.showDuration, easing: options.showEasing}\n            );\n        }\n\n        function updateProgress() {\n            var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;\n            $progressElement.width(percentage + '%');\n        }\n    }\n\n    function getOptions() {\n        return langx.extend({}, getDefaults(), toastr.options);\n    }\n\n    function removeToast($toastElement) {\n        if (!$container) { $container = getContainer(); }\n        if ($toastElement.is(':visible')) {\n            return;\n        }\n        $toastElement.remove();\n        $toastElement = null;\n        if ($container.children().length === 0) {\n            $container.remove();\n            previousToast = undefined;\n        }\n    }\n\n    return langx.attach(skylark,\"itg.toastr\",toastr);\n});"]}