{"version":3,"sources":["skylark-toastr.js"],"names":["define","skylark","langx","$","$container","listener","previousToast","toastId","toastType","error","info","success","warning","toastr","clear","$toastElement","clearOptions","options","getOptions","getContainer","clearToast","toastsToClear","children","i","length","clearContainer","remove","removeToast","message","title","optionsOverride","notify","type","iconClass","iconClasses","subscribe","callback","version","create","containerId","attr","addClass","positionClass","appendTo","target","createContainer","force","hideMethod","duration","hideDuration","easing","hideEasing","complete","publish","args","map","extend","preventDuplicates","shouldExit","intervalId","$titleElement","$messageElement","$progressElement","$closeElement","closeHtml","progressBar","hideEta","maxHideTime","response","state","startTime","Date","toastClass","suffix","escapeHtml","append","titleClass","setTitle","messageClass","setMessage","closeButton","closeClass","prepend","progressClass","rtl","newestOnTop","ariaValue","setAria","hide","showMethod","showDuration","showEasing","onShown","timeOut","setTimeout","hideToast","parseFloat","getTime","setInterval","updateProgress","closeOnHover","hover","stickAround","delayedHideToast","onclick","tapToDismiss","click","event","stopPropagation","undefined","cancelBubble","onCloseClick","handleEvents","debug","console","log","source","replace","override","method","closeMethod","closeDuration","closeEasing","clearTimeout","onHidden","endTime","extendedTimeOut","stop","percentage","width","is","attach","main"],"mappings":";;;;;;;g4BAAAA,EAAA,yBACA,wBACA,sBACA,qBACA,oBACA,oBACA,sBACA,wBACA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EACAC,EAsBAC,EArBAC,EAAA,EACAC,GACAC,MAAA,QACAC,KAAA,OACAC,QAAA,UACAC,QAAA,WAGAC,GACAC,MARA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,IACAd,GAAAe,EAAAF,GACAG,EAAAL,EAAAE,EAAAD,IAmBA,SAAAC,GAEA,IADA,IAAAI,EAAAjB,EAAAkB,WACAC,EAAAF,EAAAG,OAAA,EAAAD,GAAA,EAAAA,IACAH,EAAAjB,EAAAkB,EAAAE,IAAAN,GArBAQ,CAAAR,IAKAS,OADA,SAAAX,GACA,IAAAE,EAAAC,IACAd,GAAAe,EAAAF,GACA,GAAAF,GAAA,IAAAZ,EAAA,SAAAY,GAAAS,OAEA,YADAG,EAAAZ,GAGAX,EAAAkB,WAAAE,QACApB,EAAAsB,UANAjB,MAeA,SAAAmB,EAAAC,EAAAC,GACA,OAAAC,GACAC,KAAAxB,EAAAC,MACAwB,UAAAf,IAAAgB,YAAAzB,MACAmB,QAAAA,EACAE,gBAAAA,EACAD,MAAAA,KApBAV,aAAAA,EACAT,KAmCA,SAAAkB,EAAAC,EAAAC,GACA,OAAAC,GACAC,KAAAxB,EAAAE,KACAuB,UAAAf,IAAAgB,YAAAxB,KACAkB,QAAAA,EACAE,gBAAAA,EACAD,MAAAA,KAxCAZ,WACAkB,UA2CA,SAAAC,GACA/B,EAAA+B,GA3CAzB,QA8CA,SAAAiB,EAAAC,EAAAC,GACA,OAAAC,GACAC,KAAAxB,EAAAG,QACAsB,UAAAf,IAAAgB,YAAAvB,QACAiB,QAAAA,EACAE,gBAAAA,EACAD,MAAAA,KAnDAQ,QAAA,QACAzB,QA3BA,SAAAgB,EAAAC,EAAAC,GACA,OAAAC,GACAC,KAAAxB,EAAAI,QACAqB,UAAAf,IAAAgB,YAAAtB,QACAgB,QAAAA,EACAE,gBAAAA,EACAD,MAAAA,MAuCA,SAAAV,EAAAF,EAAAqB,GAGA,OAFArB,IAAAA,EAAAC,MACAd,EAAAD,EAAA,IAAAc,EAAAsB,cACAf,OACApB,GAEAkC,IACAlC,EAAA,SAAAa,GAMA,OALAb,EAAAD,EAAA,UACAqC,KAAA,KAAAvB,EAAAsB,aACAE,SAAAxB,EAAAyB,gBAEAC,SAAAxC,EAAAc,EAAA2B,SACAxC,EANAyC,CAAA5B,IAEAb,GAfA,SAAAgB,EAAAL,EAAAE,EAAAD,GACA,IAAA8B,KAAA9B,IAAAA,EAAA8B,QAAA9B,EAAA8B,MACA,SAAA/B,IAAA+B,GAAA,IAAA3C,EAAA,SAAAY,GAAAS,UACAT,EAAAE,EAAA8B,aACAC,SAAA/B,EAAAgC,aACAC,OAAAjC,EAAAkC,WACAC,SAAA,WAAAzB,EAAAZ,OAEA,GA0DA,SAAAsC,EAAAC,GACAjD,GACAA,EAAAiD,GAGA,SAAAvB,EAAAwB,GACA,IAAAtC,EAAAC,IACAe,EAAAsB,EAAAtB,WAAAhB,EAAAgB,UAOA,QALA,IAAAsB,EAAA,kBACAtC,EAAAf,EAAAsD,OAAAvC,EAAAsC,EAAAzB,iBACAG,EAAAsB,EAAAzB,gBAAAG,WAAAA,IAyLA,SAAAhB,EAAAsC,GACA,GAAAtC,EAAAwC,kBAAA,CACA,GAAAF,EAAA3B,UAAAtB,EACA,OAAA,EAEAA,EAAAiD,EAAA3B,QAGA,OAAA,EA9LA8B,CAAAzC,EAAAsC,GAAA,CAEAhD,IAEAH,EAAAe,EAAAF,GAAA,GAEA,IAAA0C,EAAA,KACA5C,EAAAZ,EAAA,UACAyD,EAAAzD,EAAA,UACA0D,EAAA1D,EAAA,UACA2D,EAAA3D,EAAA,UACA4D,EAAA5D,EAAAc,EAAA+C,WACAC,GACAN,WAAA,KACAO,QAAA,KACAC,YAAA,MAEAC,GACA7D,QAAAA,EACA8D,MAAA,UACAC,UAAA,IAAAC,KACAtD,QAAAA,EACAsC,IAAAA,GAeA,OA0FAA,EAAAtB,WACAlB,EAAA0B,SAAAxB,EAAAuD,YAAA/B,SAAAR,GAYA,WACA,GAAAsB,EAAA1B,MAAA,CACA,IAAA4C,EAAAlB,EAAA1B,MACAZ,EAAAyD,aACAD,EAAAC,EAAAnB,EAAA1B,QAEA+B,EAAAe,OAAAF,GAAAhC,SAAAxB,EAAA2D,YACA7D,EAAA4D,OAAAf,IA7FAiB,GAiGA,WACA,GAAAtB,EAAA3B,QAAA,CACA,IAAA6C,EAAAlB,EAAA3B,QACAX,EAAAyD,aACAD,EAAAC,EAAAnB,EAAA3B,UAEAiC,EAAAc,OAAAF,GAAAhC,SAAAxB,EAAA6D,cACA/D,EAAA4D,OAAAd,IAvGAkB,GA4GA9D,EAAA+D,cACAjB,EAAAtB,SAAAxB,EAAAgE,YAAAzC,KAAA,OAAA,UACAzB,EAAAmE,QAAAnB,IAKA9C,EAAAgD,cACAH,EAAArB,SAAAxB,EAAAkE,eACApE,EAAAmE,QAAApB,IAKA7C,EAAAmE,KACArE,EAAA0B,SAAA,OA7CAxB,EAAAoE,YACAjF,EAAA8E,QAAAnE,GAEAX,EAAAuE,OAAA5D,GAzEA,WACA,IAAAuE,EAAA,GACA,OAAA/B,EAAAtB,WACA,IAAA,gBACA,IAAA,aACAqD,EAAA,SACA,MACA,QACAA,EAAA,YAEAvE,EAAAyB,KAAA,YAAA8C,GAbAC,GAkDAxE,EAAAyE,OAEAzE,EAAAE,EAAAwE,aACAzC,SAAA/B,EAAAyE,aAAAxC,OAAAjC,EAAA0E,WAAAvC,SAAAnC,EAAA2E,UAGA3E,EAAA4E,QAAA,IACAlC,EAAAmC,WAAAC,EAAA9E,EAAA4E,SACA5B,EAAAE,YAAA6B,WAAA/E,EAAA4E,SACA5B,EAAAC,SAAA,IAAAK,MAAA0B,UAAAhC,EAAAE,YACAlD,EAAAgD,cACAA,EAAAN,WAAAuC,YAAAC,EAAA,MA7CA,WACAlF,EAAAmF,cACArF,EAAAsF,MAAAC,EAAAC,IAGAtF,EAAAuF,SAAAvF,EAAAwF,cACA1F,EAAA2F,MAAAX,GAGA9E,EAAA+D,aAAAjB,GACAA,EAAA2C,MAAA,SAAAC,GACAA,EAAAC,gBACAD,EAAAC,uBACAC,IAAAF,EAAAG,eAAA,IAAAH,EAAAG,eACAH,EAAAG,cAAA,GAGA7F,EAAA8F,cACA9F,EAAA8F,aAAAJ,GAGAZ,GAAA,KAIA9E,EAAAuF,SACAzF,EAAA2F,MAAA,SAAAC,GACA1F,EAAAuF,QAAAG,GACAZ,MA3EAiB,GAEA3D,EAAAe,GAEAnD,EAAAgG,OAAAC,SACAA,QAAAC,IAAA/C,GAGArD,EAEA,SAAA2D,EAAA0C,GAKA,OAJA,MAAAA,IACAA,EAAA,IAGAA,EACAC,QAAA,KAAA,SACAA,QAAA,KAAA,UACAA,QAAA,KAAA,SACAA,QAAA,KAAA,QACAA,QAAA,KAAA,QAgJA,SAAAtB,EAAAuB,GACA,IAAAC,EAAAD,IAAA,IAAArG,EAAAuG,YAAAvG,EAAAuG,YAAAvG,EAAA8B,WACAC,EAAAsE,IAAA,IAAArG,EAAAwG,cACAxG,EAAAwG,cAAAxG,EAAAgC,aACAC,EAAAoE,IAAA,IAAArG,EAAAyG,YAAAzG,EAAAyG,YAAAzG,EAAAkC,WACA,IAAAhD,EAAA,SAAAY,GAAAS,QAAA8F,EAIA,OADAK,aAAA1D,EAAAN,YACA5C,EAAAwG,IACAvE,SAAAA,EACAE,OAAAA,EACAE,SAAA,WACAzB,EAAAZ,GACA4G,aAAAhE,GACA1C,EAAA2G,UAAA,WAAAxD,EAAAC,OACApD,EAAA2G,WAEAxD,EAAAC,MAAA,SACAD,EAAAyD,QAAA,IAAAtD,KACAlB,EAAAe,MAKA,SAAAmC,KACAtF,EAAA4E,QAAA,GAAA5E,EAAA6G,gBAAA,KACAnE,EAAAmC,WAAAC,EAAA9E,EAAA6G,iBACA7D,EAAAE,YAAA6B,WAAA/E,EAAA6G,iBACA7D,EAAAC,SAAA,IAAAK,MAAA0B,UAAAhC,EAAAE,aAIA,SAAAmC,IACAqB,aAAAhE,GACAM,EAAAC,QAAA,EACAnD,EAAAgH,MAAA,GAAA,GAAA9G,EAAAwE,aACAzC,SAAA/B,EAAAyE,aAAAxC,OAAAjC,EAAA0E,aAIA,SAAAQ,IACA,IAAA6B,GAAA/D,EAAAC,SAAA,IAAAK,MAAA0B,WAAAhC,EAAAE,YAAA,IACAL,EAAAmE,MAAAD,EAAA,MAIA,SAAA9G,IACA,OAAAhB,EAAAsD,WAzSAiD,cAAA,EACAjC,WAAA,QACAjC,YAAA,kBACA0E,OAAA,EAEAxB,WAAA,SACAC,aAAA,IACAC,WAAA,QACAC,aAAAiB,EACA9D,WAAA,UACAE,aAAA,IACAE,WAAA,QACAyE,cAAAf,EACAW,aAAA,EACAC,eAAA,EACAC,aAAA,EACAtB,cAAA,EAEA0B,gBAAA,IACA5F,aACAzB,MAAA,cACAC,KAAA,aACAC,QAAA,gBACAC,QAAA,iBAEAqB,UAAA,aACAS,cAAA,kBACAmD,QAAA,IACAjB,WAAA,cACAE,aAAA,gBACAJ,YAAA,EACA9B,OAAA,OACAoB,UAAA,yCACAiB,WAAA,qBACAI,aAAA,EACA5B,mBAAA,EACAQ,aAAA,EACAkB,cAAA,iBACAC,KAAA,GAmQAvE,EAAAI,SAGA,SAAAU,EAAAZ,GACAX,IAAAA,EAAAe,KACAJ,EAAAmH,GAAA,cAGAnH,EAAAW,SACAX,EAAA,KACA,IAAAX,EAAAkB,WAAAE,SACApB,EAAAsB,SACApB,OAAAuG,IAIA,OAAA3G,EAAAiI,OAAAlI,EAAA,aAAAY,KAEAb,EAAA,uBACA,YACA,SAAAa,GACA,OAAAA,IAEAb,EAAA,kBAAA,uBAAA,SAAAoI,GAAA,OAAAA","file":"../skylark-toastr.js","sourcesContent":["define('skylark-toastr/toastr',[\n    \"skylark-langx/skylark\",\n    \"skylark-langx/langx\",\n    \"skylark-domx-query\",\n    \"skylark-domx-data\",\n    \"skylark-domx-geom\",\n    \"skylark-domx-styler\",\n    \"skylark-domx-eventer\"\n], function (skylark,langx,$) {\n    var $container;\n    var listener;\n    var toastId = 0;\n    var toastType = {\n        error: 'error',\n        info: 'info',\n        success: 'success',\n        warning: 'warning'\n    };\n\n    var toastr = {\n        clear: clear,\n        remove: remove,\n        error: error,\n        getContainer: getContainer,\n        info: info,\n        options: {},\n        subscribe: subscribe,\n        success: success,\n        version: '2.1.4',\n        warning: warning\n    };\n\n    var previousToast;\n\n\n    ////////////////\n\n    function error(message, title, optionsOverride) {\n        return notify({\n            type: toastType.error,\n            iconClass: getOptions().iconClasses.error,\n            message: message,\n            optionsOverride: optionsOverride,\n            title: title\n        });\n    }\n\n    function getContainer(options, create) {\n        if (!options) { options = getOptions(); }\n        $container = $('#' + options.containerId);\n        if ($container.length) {\n            return $container;\n        }\n        if (create) {\n            $container = createContainer(options);\n        }\n        return $container;\n    }\n\n    function info(message, title, optionsOverride) {\n        return notify({\n            type: toastType.info,\n            iconClass: getOptions().iconClasses.info,\n            message: message,\n            optionsOverride: optionsOverride,\n            title: title\n        });\n    }\n\n    function subscribe(callback) {\n        listener = callback;\n    }\n\n    function success(message, title, optionsOverride) {\n        return notify({\n            type: toastType.success,\n            iconClass: getOptions().iconClasses.success,\n            message: message,\n            optionsOverride: optionsOverride,\n            title: title\n        });\n    }\n\n    function warning(message, title, optionsOverride) {\n        return notify({\n            type: toastType.warning,\n            iconClass: getOptions().iconClasses.warning,\n            message: message,\n            optionsOverride: optionsOverride,\n            title: title\n        });\n    }\n\n    function clear($toastElement, clearOptions) {\n        var options = getOptions();\n        if (!$container) { getContainer(options); }\n        if (!clearToast($toastElement, options, clearOptions)) {\n            clearContainer(options);\n        }\n    }\n\n    function remove($toastElement) {\n        var options = getOptions();\n        if (!$container) { getContainer(options); }\n        if ($toastElement && $(':focus', $toastElement).length === 0) {\n            removeToast($toastElement);\n            return;\n        }\n        if ($container.children().length) {\n            $container.remove();\n        }\n    }\n\n    // internal functions\n\n    function clearContainer (options) {\n        var toastsToClear = $container.children();\n        for (var i = toastsToClear.length - 1; i >= 0; i--) {\n            clearToast($(toastsToClear[i]), options);\n        }\n    }\n\n    function clearToast ($toastElement, options, clearOptions) {\n        var force = clearOptions && clearOptions.force ? clearOptions.force : false;\n        if ($toastElement && (force || $(':focus', $toastElement).length === 0)) {\n            $toastElement[options.hideMethod]({\n                duration: options.hideDuration,\n                easing: options.hideEasing,\n                complete: function () { removeToast($toastElement); }\n            });\n            return true;\n        }\n        return false;\n    }\n\n    function createContainer(options) {\n        $container = $('<div/>')\n            .attr('id', options.containerId)\n            .addClass(options.positionClass);\n\n        $container.appendTo($(options.target));\n        return $container;\n    }\n\n    function getDefaults() {\n        return {\n            tapToDismiss: true,\n            toastClass: 'toast',\n            containerId: 'toast-container',\n            debug: false,\n\n            showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery\n            showDuration: 300,\n            showEasing: 'swing', //swing and linear are built into jQuery\n            onShown: undefined,\n            hideMethod: 'fadeOut',\n            hideDuration: 1000,\n            hideEasing: 'swing',\n            onHidden: undefined,\n            closeMethod: false,\n            closeDuration: false,\n            closeEasing: false,\n            closeOnHover: true,\n\n            extendedTimeOut: 1000,\n            iconClasses: {\n                error: 'toast-error',\n                info: 'toast-info',\n                success: 'toast-success',\n                warning: 'toast-warning'\n            },\n            iconClass: 'toast-info',\n            positionClass: 'toast-top-right',\n            timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky\n            titleClass: 'toast-title',\n            messageClass: 'toast-message',\n            escapeHtml: false,\n            target: 'body',\n            closeHtml: '<button type=\"button\">&times;</button>',\n            closeClass: 'toast-close-button',\n            newestOnTop: true,\n            preventDuplicates: false,\n            progressBar: false,\n            progressClass: 'toast-progress',\n            rtl: false\n        };\n    }\n\n    function publish(args) {\n        if (!listener) { return; }\n        listener(args);\n    }\n\n    function notify(map) {\n        var options = getOptions();\n        var iconClass = map.iconClass || options.iconClass;\n\n        if (typeof (map.optionsOverride) !== 'undefined') {\n            options = langx.extend(options, map.optionsOverride);\n            iconClass = map.optionsOverride.iconClass || iconClass;\n        }\n\n        if (shouldExit(options, map)) { return; }\n\n        toastId++;\n\n        $container = getContainer(options, true);\n\n        var intervalId = null;\n        var $toastElement = $('<div/>');\n        var $titleElement = $('<div/>');\n        var $messageElement = $('<div/>');\n        var $progressElement = $('<div/>');\n        var $closeElement = $(options.closeHtml);\n        var progressBar = {\n            intervalId: null,\n            hideEta: null,\n            maxHideTime: null\n        };\n        var response = {\n            toastId: toastId,\n            state: 'visible',\n            startTime: new Date(),\n            options: options,\n            map: map\n        };\n\n        personalizeToast();\n\n        displayToast();\n\n        handleEvents();\n\n        publish(response);\n\n        if (options.debug && console) {\n            console.log(response);\n        }\n\n        return $toastElement;\n\n        function escapeHtml(source) {\n            if (source == null) {\n                source = '';\n            }\n\n            return source\n                .replace(/&/g, '&amp;')\n                .replace(/\"/g, '&quot;')\n                .replace(/'/g, '&#39;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;');\n        }\n\n        function personalizeToast() {\n            setIcon();\n            setTitle();\n            setMessage();\n            setCloseButton();\n            setProgressBar();\n            setRTL();\n            setSequence();\n            setAria();\n        }\n\n        function setAria() {\n            var ariaValue = '';\n            switch (map.iconClass) {\n                case 'toast-success':\n                case 'toast-info':\n                    ariaValue =  'polite';\n                    break;\n                default:\n                    ariaValue = 'assertive';\n            }\n            $toastElement.attr('aria-live', ariaValue);\n        }\n\n        function handleEvents() {\n            if (options.closeOnHover) {\n                $toastElement.hover(stickAround, delayedHideToast);\n            }\n\n            if (!options.onclick && options.tapToDismiss) {\n                $toastElement.click(hideToast);\n            }\n\n            if (options.closeButton && $closeElement) {\n                $closeElement.click(function (event) {\n                    if (event.stopPropagation) {\n                        event.stopPropagation();\n                    } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {\n                        event.cancelBubble = true;\n                    }\n\n                    if (options.onCloseClick) {\n                        options.onCloseClick(event);\n                    }\n\n                    hideToast(true);\n                });\n            }\n\n            if (options.onclick) {\n                $toastElement.click(function (event) {\n                    options.onclick(event);\n                    hideToast();\n                });\n            }\n        }\n\n        function displayToast() {\n            $toastElement.hide();\n\n            $toastElement[options.showMethod](\n                {duration: options.showDuration, easing: options.showEasing, complete: options.onShown}\n            );\n\n            if (options.timeOut > 0) {\n                intervalId = setTimeout(hideToast, options.timeOut);\n                progressBar.maxHideTime = parseFloat(options.timeOut);\n                progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n                if (options.progressBar) {\n                    progressBar.intervalId = setInterval(updateProgress, 10);\n                }\n            }\n        }\n\n        function setIcon() {\n            if (map.iconClass) {\n                $toastElement.addClass(options.toastClass).addClass(iconClass);\n            }\n        }\n\n        function setSequence() {\n            if (options.newestOnTop) {\n                $container.prepend($toastElement);\n            } else {\n                $container.append($toastElement);\n            }\n        }\n\n        function setTitle() {\n            if (map.title) {\n                var suffix = map.title;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.title);\n                }\n                $titleElement.append(suffix).addClass(options.titleClass);\n                $toastElement.append($titleElement);\n            }\n        }\n\n        function setMessage() {\n            if (map.message) {\n                var suffix = map.message;\n                if (options.escapeHtml) {\n                    suffix = escapeHtml(map.message);\n                }\n                $messageElement.append(suffix).addClass(options.messageClass);\n                $toastElement.append($messageElement);\n            }\n        }\n\n        function setCloseButton() {\n            if (options.closeButton) {\n                $closeElement.addClass(options.closeClass).attr('role', 'button');\n                $toastElement.prepend($closeElement);\n            }\n        }\n\n        function setProgressBar() {\n            if (options.progressBar) {\n                $progressElement.addClass(options.progressClass);\n                $toastElement.prepend($progressElement);\n            }\n        }\n\n        function setRTL() {\n            if (options.rtl) {\n                $toastElement.addClass('rtl');\n            }\n        }\n\n        function shouldExit(options, map) {\n            if (options.preventDuplicates) {\n                if (map.message === previousToast) {\n                    return true;\n                } else {\n                    previousToast = map.message;\n                }\n            }\n            return false;\n        }\n\n        function hideToast(override) {\n            var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;\n            var duration = override && options.closeDuration !== false ?\n                options.closeDuration : options.hideDuration;\n            var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;\n            if ($(':focus', $toastElement).length && !override) {\n                return;\n            }\n            clearTimeout(progressBar.intervalId);\n            return $toastElement[method]({\n                duration: duration,\n                easing: easing,\n                complete: function () {\n                    removeToast($toastElement);\n                    clearTimeout(intervalId);\n                    if (options.onHidden && response.state !== 'hidden') {\n                        options.onHidden();\n                    }\n                    response.state = 'hidden';\n                    response.endTime = new Date();\n                    publish(response);\n                }\n            });\n        }\n\n        function delayedHideToast() {\n            if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                intervalId = setTimeout(hideToast, options.extendedTimeOut);\n                progressBar.maxHideTime = parseFloat(options.extendedTimeOut);\n                progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n            }\n        }\n\n        function stickAround() {\n            clearTimeout(intervalId);\n            progressBar.hideEta = 0;\n            $toastElement.stop(true, true)[options.showMethod](\n                {duration: options.showDuration, easing: options.showEasing}\n            );\n        }\n\n        function updateProgress() {\n            var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;\n            $progressElement.width(percentage + '%');\n        }\n    }\n\n    function getOptions() {\n        return langx.extend({}, getDefaults(), toastr.options);\n    }\n\n    function removeToast($toastElement) {\n        if (!$container) { $container = getContainer(); }\n        if ($toastElement.is(':visible')) {\n            return;\n        }\n        $toastElement.remove();\n        $toastElement = null;\n        if ($container.children().length === 0) {\n            $container.remove();\n            previousToast = undefined;\n        }\n    }\n\n    return langx.attach(skylark,\"itg.toastr\",toastr);\n});\ndefine('skylark-toastr/main',[\r\n\t\"./toastr\"\r\n],function(toastr){\r\n\treturn toastr;\r\n});\ndefine('skylark-toastr', ['skylark-toastr/main'], function (main) { return main; });\n\n"]}